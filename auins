#!/usr/bin/env bash
# Author/Wechat: Auroot
# Script name: Auins (ArchLinux User Installation Scripts) 
# URL GitHub: https://github.com/Auroots/Auins
# URL Gitee : https://gitee.com/auroot/Auins
# set -xe
# set -eu
echo &>/dev/null

# @ script source
# auroot  |  gitee  |  github  |  test
SCRIPTS_SOURCE="test"
export Source_Share Source_Local

# @待解决的问题 
: << EOF
    - [ ] 检查reflector报错的问题(不影响正常使用);
    - [ ] 新增: 快照备份软件(timeshift)，开启方式：配置文件，默认开启;
    - [x] 新增: pacman多线程下载(axel)，开启方式：配置文件中或脚本选项;
    - [x] 新增: 输入法(ibus-rime)，开启方式：配置文件中或脚本选项;
    - [x] 新增: 脚本选项逻辑,加入set选项,将设置选项归类;
    - [x] 新增: 独立的字体安装模块;
    - [x] 新增: 独立的信息输出模块;
    - [x] 修改: 配置系统不再自动安装字体,只有安装桌面环境后,才会提示;
    - [?] 修复: 解决不输入Root密码,自动跳过; ?检查代码未发现问题
    - [ ] 修复: 解决设置Swap大小不成功或自动跳过的问题 (虚拟机下正常;
    - [x] 修复: 选择磁盘时,无法识别nvme名称;
    - [ ] 修复: 非root权限运行脚本时,不会终止;
    - [x] 修复: 无法正确配置时区;
    - [x] 修复: Process_Manage无法关闭多个进程;
    - [x] 优化: 部分语法;
EOF

# @可能有用的文件
# /proc/cmdline

# sed -i.bak 's/^aaa=yes/aaa=no/' [file] # 替换并备份
# @脚本初始化
function Script_Variable_init(){
    Script_Version="ArchLinux User Install Scripts v4.6 r5.5" 
    Auins_Dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )
    [ "$Auins_Dir" = "/" ] && Auins_Dir=""
    Share_Dir="${Auins_Dir}/share" 
    Local_Dir="${Auins_Dir}/local" 
    Auins_Profile="${Local_Dir}/profile.conf"  
    Auins_Infofile="${Local_Dir}/auins.info"  
    Auins_api_file="${Local_Dir}/api.json"  
    Mirrorlist_Script="${Share_Dir}/Mirrorlist_Manage.sh"
    Users_Script="${Share_Dir}/Users_Manage.sh"
    Partition_Script="${Share_Dir}/Partition_Manage.sh"
    Desktop_Script="${Share_Dir}/Desktop_Manage.sh"
    Process_Script="${Share_Dir}/Process_Manage.sh"
    Fonts_Script="${Share_Dir}/Fonts_Manage.sh"
    Print_INFO="${Share_Dir}/Print_INFO.sh"
    System_Root="/mnt"
    Livecd_Version_Route="/run/archiso/airootfs/version"
    # entries_Boot="/sys/firmware/efi/efivars"  # discern: UEFI
    if [ ! -d "${Local_Dir}" ]; then mkdir -p "${Local_Dir}"; fi
    if [ ! -d "${Share_Dir}" ]; then mkdir -p "${Share_Dir}"; fi
}

# 地址: auins.info(INFO)| script.conf(CONF)
# 读取: Config_File_Manage [INFO/CONF] [Read] [头部参数]
# 写入: Config_File_Manage [INFO/CONF] [Write] [头部参数] [修改内容]
function Config_File_Manage(){ 
    local format=" = "; parameter="$3"; content="$4";
    case "$1" in
        INFO) local Files="$Auins_Infofile" ;;
        CONF) local Files="$Auins_Profile" ;;
    esac
    case "$2" in
        Read )   grep -w "$parameter" < "$Files" | awk -F "=" '{print $2}' | awk '{sub(/^[\t ]*/,"");print}' | awk '{sub(/[\t ]*$/,"");print}' ;;
        Write) 
                List_row=$(grep -nw "$parameter" < "$Files" | awk -F ":" '{print $1}';)
                if [ -n "$List_row" ]; then
                    sed -i "${List_row}c ${parameter}${format}${content}" "$Files" 2>/dev/null \
                        ||  case $Normals in [Yy]*) 
                                echo -e "\n${out_ERROR} ${white}You don't have permission.${suffix}"
                                echo -e "${out_WARNING} ${white}Please use ${yellow}\"command: sudo\"${white} or ${yellow}\"user: root\"${white} to execute.${suffix}\n"
                                exit 4;
                            esac
                fi
    esac 
}
# @install Programs 安装包
function Install_Program() {
    # arch-chroot ${MNT_DIR} bash -c "$COMMAND"
    set +e
    IFS=' '; PACKAGES=("$@");
    for VARIABLE in {1..3}
    do
        local COMMAND="pacman -Syu --noconfirm --needed ${PACKAGES[@]}"
        if ! bash -c "$COMMAND" ; then break; else sleep 3; break; fi
    done
    echo "$VARIABLE" &> /dev/null
    set -e
}
# @脚本自检
function Script_init(){
    # Read Profile.conf
    CONF_Hostname=$(Config_File_Manage CONF Read Hostname)
    CONF_Password_SSH=$(Config_File_Manage CONF Read "Password_SSH")
    CONF_Service_SSH=$(Config_File_Manage CONF Read "Service_SSH")
    # Detect CPU
    CPU_Name=$(head -n 5 /proc/cpuinfo | grep "model name" | awk -F ": " '{print $2}')
    if lscpu | grep GenuineIntel &>/dev/null  ; then CPU_Vendor="intel";
    elif lscpu | grep AuthenticAMD &>/dev/null; then CPU_Vendor="amd";
    fi
    Config_File_Manage INFO Write CPU_Name "$CPU_Name"
    Config_File_Manage INFO Write CPU_Vendor "$CPU_Vendor"
    # Detect Host_Environment
    if   lspci | grep -i virtualbox &>/dev/null; then Host_Environment="virtualbox";
    elif lspci | grep -i vmware &>/dev/null    ; then Host_Environment="vmware"; 
    else Host_Environment="Computer";
    fi
    Config_File_Manage INFO Write Host_Environment "$Host_Environment";
    # 判断当前模式
    if [ -e /local/Chroot ]; then  ChrootPatterns="Chroot-ON"; else ChrootPatterns="Chroot-OFF"; fi
    Config_File_Manage INFO Write Patterns "$ChrootPatterns";
    
    # Detect boot   
    if [ -d /sys/firmware/efi ]; then
        Boot_Type="UEFI" Disk_Type="GPT"
    else
        Boot_Type="BIOS" Disk_Type="MBR"
    fi
    Config_File_Manage INFO Write Boot_Type ${Boot_Type}
    Config_File_Manage INFO Write Disk_Type ${Disk_Type}
    INFO_Boot_way=$(Config_File_Manage INFO Read "Boot_Type")
    
    # 本地化地区
    Country_Name=$(Config_File_Manage INFO Read "Country_Name")
    if [ -z  "$Country_Name" ] ; then
        curl -fsSL --fail https://ipapi.co/json > "$Auins_api_file"
        CONF_Timezone=$(Config_File_Manage CONF Read Timezone)
        if [[ "$CONF_Timezone" == "" ]]; then
            API_Timezone=$(grep -w "timezone" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')
            Config_File_Manage INFO Write Timezone "$API_Timezone"
        else
            Config_File_Manage INFO Write Timezone "$CONF_Timezone";
        fi
        # 从api中获取ip，国家，时区信息，写入到info文件，暂时无其他作用
        API_Public_IP=$(grep -w "ip" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')      && Config_File_Manage INFO Write Public_IP "$API_Public_IP";
        API_Country=$(grep -w "country" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')   && Config_File_Manage INFO Write Country "$API_Country";
        API_Country_Name=$(grep -w "country_name" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')  && Config_File_Manage INFO Write Country_Name "$API_Country_Name";
    fi
    # 校准live环境的时间
    ln -sf /usr/share/zoneinfo/"$(Config_File_Manage INFO Read "Timezone")" /etc/localtime &>/dev/null && hwclock --systohc --utc
    # 检查archiso版本，如果过低，叫提醒更新
    CONF_Archiso_Version_check=$(Config_File_Manage CONF Read "Archiso_Version_check");
    case "$ChrootPatterns" in  
        Chroot-OFF) 
            # 根据配置文件, 判断是否开启SSH远程服务, Chroot下不执行
            case $CONF_Service_SSH in [Yy]*) Open_SSH; sleep 5; esac
            # Detect Archiso Version 检查 LiveCD 版本 并提醒更新
            # entries_livecd="/run/archiso/airootfs"  # discern: liveCD
            if [ -d /run/archiso/airootfs ]; then 
                # Home list (LiveCD_Model \ Normal_Model)
                echo "Yes" > "$Local_Dir"/LiveCD 2> /dev/null
                case $CONF_Archiso_Version_check in [Yy]*) Archiso_Version_Testing "$Livecd_Version_Route"; esac
            else 
                Normals="yes"; 
                CONF_Archiso_Version_check="no"
            fi
    esac
}

# @下载所需的脚本模块
function Update_Share(){     
    # 根据配置文件选择源, 将其作为脚本的下载源 Module URL: Default settings
    function URL(){
        case ${1} in
            "gitee"  ) source="https://gitee.com/auroot/Auins/raw/master" ;;
            "github" ) source="https://raw.githubusercontent.com/Auroots/Auins/main";;
            "auroot" ) source="http://auins.auroot.cn" ;;
            "test"   ) source="http://test.auroot.cn" 
        esac
        Source_Share="${source}/share"
        Source_Local="${source}/local"
    }
    # 下载想要脚本模块 
    function Download_Script(){
        if [ ! -e "$Print_INFO" ]; then         curl -fsSL "$Source_Share/Print_INFO.sh" > "$Print_INFO"                && chmod +x "$Print_INFO";          fi
        if [ ! -e "$Mirrorlist_Script" ]; then  curl -fsSL "$Source_Share/Mirrorlist_Manage.sh" > "$Mirrorlist_Script"  && chmod +x "$Mirrorlist_Script";   fi
        if [ ! -e "$Users_Script"    ]; then    curl -fsSL "$Source_Share/Users_Manage.sh"    > "$Users_Script"         && chmod +x "$Users_Script";        fi
        if [ ! -e "$Partition_Script"  ]; then  curl -fsSL "$Source_Share/Partition_Manage.sh"  > "$Partition_Script"   && chmod +x "$Partition_Script";    fi
        if [ ! -e "$Desktop_Script" ]; then     curl -fsSL "$Source_Share/Desktop_Manage.sh" > "$Desktop_Script"        && chmod +x "$Desktop_Script";      fi
        if [ ! -e "$Fonts_Script" ]; then       curl -fsSL "$Source_Share/Fonts_Manage.sh" > "$Fonts_Script"            && chmod +x "$Fonts_Script";        fi
        if [ ! -e "$Process_Script"    ]; then  curl -fsSL "$Source_Share/Process_Manage.sh" > "$Process_Script"        && chmod +x "$Process_Script";      fi
        if [ ! -e "${Auins_Profile}" ]; then    curl -fsSL "${Source_Local}/profile.conf" > "$Auins_Profile"; fi
        if [ ! -e "${Auins_Infofile}" ]; then   curl -fsSL "${Source_Local}/auins.info" > "$Auins_Infofile";  fi
    }
    case ${1} in
        "URL") URL "$2";;
        "Download_Script") Download_Script
    esac
}
# @该死的颜色
function Set_Color_Variable(){
    # 红 绿 黄 蓝 白 后缀
    red='\033[1;31m'; green='\033[1;32m'  
    yellow='\033[1;33m'; blue='\033[1;36m'  
    white='\033[1;37m'; suffix='\033[0m'     
    #-----------------------------#
    # rw='\033[1;41m'  #--红白
    wg='\033[1;42m'; # ws='\033[1;43m'      #白绿 \ 白褐
    #wb='\033[1;44m'; wq='\033[1;45m'    #白蓝 \ 白紫
    # wa='\033[1;46m'; bx='\033[1;4;36m'  #白青 \ 蓝 下划线
    #-----------------------------#
    # 交互: 蓝  红 \ 绿 黄
    inB=$(echo -e "${blue}-=>${suffix} "); # inR=$(echo -e "${red}-=>${suffix} ")
    # inG=$(echo -e "${green}-=>${suffix} "); inY=$(echo -e "${yellow}-=>${suffix} ")
    #-----------------------------
    # 提示 蓝 红 绿 黄
    # outB="${white}::${blue} =>${suffix}";  outR="${white}::${red} =>${suffix}"
    outG="${white}::${green} =>${suffix}"; outY="${white}::${yellow} =>${suffix}"

    out_SKIP="${white}::${yellow} [ Skip ] =>${suffix}"
    out_WARNING="${white}::${yellow} [ Warning ] =>${suffix}"
    out_EXEC="${white}::${blue} [ Exec ] =>${suffix}"
    out_WELL="${white}::${green} [ Well ] =>${suffix}"
    out_ERROR="${white}::${red} [ Error ] =>${suffix}"
}

# @获取用户输入，并返回
function Read_user_input(){ local user_input; read -r user_input; echo "$user_input"; }

# @网络部分集合
function Network(){
    # @获取本机IP地址，并储存到$Auins_Infofile， Network Variable
    function ethernet_info(){    
        local Info_Nic
        for  ((Cycle_number=3;Cycle_number<=10;Cycle_number++)); do
            Info_Nic=$(cut -d":" -f1 /proc/net/dev | sed -n "$Cycle_number",1p | sed 's/^[ ]*//g')
            if echo "$Info_Nic" | grep "en" &>/dev/null ; then 
                Ethernet_Name="$Info_Nic"
                Local_Ethernet_IP=$(ip route list | grep "${Ethernet_Name}" | cut -d" " -f9 | sed -n '2,1p')
                Config_File_Manage INFO Write Local_Ethernet_IP "${Local_Ethernet_IP:-Not}"; break;
            elif echo "$Info_Nic" | grep "wl" &>/dev/null ; then
                Wifi_Name="$Info_Nic"
                Local_Wifi_IP=$(ip route list | grep "${Wifi_Name}" | cut -d" " -f9 | sed -n '2,1p') 
                Config_File_Manage INFO Write Local_Wifi_IP "${Local_Wifi_IP:-Not}"; break;
            fi
        done    
    }
    # @配置WIFI，Configure WIFI
    function configure_wifi() {
        printf "${outG} ${green} Wifi SSID 'TP-Link...' :${suffix} %s" "$inB"
        read -r WIFI_SSID
        printf "${outG} ${green} Wifi Password :${suffix} %s" "$inB"
        read -r WIFI_PASSWD
        iwctl --passphrase "$WIFI_PASSWD" station "$Wifi_Name" connect "$WIFI_SSID"
        sleep 2; ip address show "${Wifi_Name}"
        if ! ping -c 3 gitee.com; then
            echo -e "${out_ERROR} ${red}Network ping check failed. Cannot continue.${suffix}"
            Process_Management stop "$0"
        fi
    }
    # @配置有线网络，Configure Ethernet.
    function configure_ethernet(){
        echo ":: One moment please............"
        ip link set "${Ethernet_Name}" up
        ip address show "${Ethernet_Name}"
        ping -c 3 gitee.com
        sleep 1;
    }
    # @配置网络
    function configure_all(){
        echo -e "\n${white}:: Checking the currently available network."; sleep 2;
        echo -e "${white}:: Ethernet: ${red}${Ethernet_Name}${suffix}\n${white}:: Wifi:   ${red}${Wifi_Name}${suffix}"
        printf "${outG} ${yellow}Query Network: Ethernet[1] Wifi[2] Exit[3]? ${suffix}%s" "$inB"
        case $(Read_user_input) in
            1 ) configure_ethernet ;;
            2 ) configure_wifi ;;
            3 ) bash "${0}" ;;
        esac
    }
    # Ethernet
    case ${1} in
        INFO     ) ethernet_info ;;
        Conf_wifi) configure_wifi ;;
        Conf_Eth ) configure_ethernet ;;
        Conf_all ) configure_all
    esac
}
# @开启SSH服务， Start ssh service 
function Open_SSH(){   
    Network INFO; 
    echo "${USER}:${CONF_Password_SSH}" | chpasswd &>/dev/null 
    echo -e "${out_EXEC} ${white}Setting SSH Username / password.${suffix}"
    bash "$Print_INFO" SSH_INFO "$USER" "$CONF_Password_SSH" "$Local_Ethernet_IP" "$Local_Wifi_IP"
    systemctl start sshd.service 
    netcap | grep sshd 
}
# @设置root密码 用户 
function ConfigurePassworld(){
    local PasswdFile Number
    export INFO_UserName UsersID CheckingID CheckingUsers
    INFO_UserName=$(Config_File_Manage INFO Read "Users")
    CheckingUsers=""
    if [ -z "$INFO_UserName" ]; then
        PasswdFile="/etc/passwd"
        for Number in {1..30}; do  
            Query=$(tail -n "${Number}" "${PasswdFile}" | head -n 1 | cut -d":" -f3)
            if [ "$Query" -gt 999 ] && [ "$Query" -lt 1050 ]; then
                CheckingID=$(grep "$Query" < ${PasswdFile} | cut -d":" -f3)
                CheckingUsers=$(id -un "$CheckingID" 2> /dev/null)
                # Config_File_Manage INFO Write Users "$CheckingUsers"
                # Config_File_Manage INFO Write UsersID "$CheckingID"
                break;
            fi
        done
        if [ -z "$CheckingUsers" ] ; then
            bash "$Users_Script" "$Auins_Profile" "$Auins_Infofile"; sleep 1;
        fi
    fi
}
# @安装系统、内核、基础包等，Install system kernel / base...
function Install_Archlinux(){    
    CONF_Linux_kernel=$(Config_File_Manage CONF Read "Linux_kernel")
    echo -e "\n${out_EXEC} ${green}Update the system clock.${suffix}"; sleep 2s   # update time
    timedatectl set-ntp true
    echo -e "${out_EXEC} ${green}Install the Kernel base packages.${suffix}\n"; sleep 2s 
    # bash "$Mirrorlist_Script" "${Auins_Profile}" "${Auins_Infofile}"
    case "$CONF_Linux_kernel" in 
        linux    ) pacstrap "$System_Root" base base-devel linux-firmware vim unzip linux linux-headers ;;
        linux-lts) pacstrap "$System_Root" base base-devel linux-firmware vim unzip linux-lts ;; 
        linux-zen) pacstrap "$System_Root" base base-devel linux-firmware vim unzip linux-zen linux-zen-headers ;;
    esac
    echo -e "\n${out_EXEC} ${green}Configure Fstab File.${suffix}"; sleep 2s
    genfstab -U $System_Root >> $System_Root/etc/fstab; sleep 2s
    LinuxKernel=$(arch-chroot $System_Root /usr/bin/uname -a | /usr/bin/cut -d"#" -f1  | awk -F " " '{print $3}')
    Config_File_Manage INFO Write LinuxKernel "$LinuxKernel";
    cp -rf "${Local_Dir}" "$System_Root" 
    cp -rf "${Share_Dir}" "$System_Root" 
    cat "$0" > $System_Root/auin.sh  && chmod +x $System_Root/auin.sh 
    touch $System_Root/local/Chroot && echo "Chroot=ON" > $System_Root/local/Chroot
}
# @Chroot -> $System_Root
function Auin_chroot(){    
    cat "$0" > $System_Root/auin.sh  && chmod +x $System_Root/auin.sh
    cp -rf "$Share_Dir" $System_Root 2> /dev/null
    cp -rf "$Local_Dir" $System_Root 2> /dev/null
    rm -rf $System_Root/local/LiveCD 2> /dev/null
    echo "No" > $System_Root/local/LiveCD_OFF 2> /dev/null
    arch-chroot $System_Root /bin/bash -c "/auin.sh"
}

# @安装 fcitx 输入法
function Configure_fcitx(){
    CONF_PKG_Fcitx=$(Config_File_Manage CONF Read "PKG_Fcitx")
    function install(){
        CONF_Install_Fcitx=$(Config_File_Manage CONF Read "Install_Fcitx")
        function install_fcitx(){
            echo -e "\n${out_EXEC} ${green}Installing [ Fcitx ].${suffix}"; sleep 2s
            pacman -Rsc --noconfirm fcitx
            Install_Program "$CONF_PKG_Fcitx" 
            Fcitx_Config="
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx"
            echo "$Fcitx_Config" >> /etc/environment
        }

        case $CONF_Install_Fcitx in
            [Yy]* ) install_fcitx;; 
                * ) printf "${outG} ${yellow}Whether to install [ Fcitx ]. Install[y] No[*]${suffix} %s" "$inB"
                    case $(Read_user_input) in
                        [Yy]*)  install_fcitx ;;
                            *) echo -e "${out_SKIP} ${white}[ Fcitx ].${suffix}\n"
                    esac
        esac 
    }
    function remove(){
        # awk '/fcitx/{print NR}' /etc/environment
        sed -i '/fcitx/d' /etc/environment
        pacman -Rsc --noconfirm "$CONF_PKG_Fcitx"
    }
    case $1 in 
        -R) remove; local status=true ;;
        * ) echo -e "${out_ERROR} ${green}Input error or the option does not exist.${suffix}" 
            # echo -e "${white}::${yellow} [ Usage ] =>${suffix} ${green}${0##*/} fcitx [ -R ] = uninstall.${suffix}"
            local status=true
    esac
    if [[ ! ${status} == true ]]; then install; fi 
}

# @安装 ibus-rime 输入法
function Configure_ibus_rime() {
    CONF_PKG_Ibus=$(Config_File_Manage CONF Read "PKG_Ibus")
    function install(){
        CONF_Install_Ibus=$(Config_File_Manage CONF Read "Install_Ibus")
        function configure_ibus() {
            if wget -P "$Local_Dir" "${Source_Local}/oh-my-rime.zip" ; then
                mkdir -p /home/"$INFO_UserName"/.config/ibus 
                unzip -d /home/"$INFO_UserName"/.config/ibus "${Local_Dir}/oh-my-rime.zip"
            fi
            Ibus_Config="
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus
ibus-daemon -d -x"
            echo "$Ibus_Config" >> /etc/environment
            echo "$Ibus_Config" >> /etc/profile
        }
        
        case $CONF_Install_Ibus in
        [Yy]*)  echo -e "\n${out_EXEC} ${green}Installing [ ibus-rime ].${suffix}"; sleep 2s
                Install_Program "$CONF_PKG_Ibus" 
                configure_ibus;;
            *)  printf "${outG} ${yellow}Whether to install [ ibus-rime ]. Install[y] No[*]${suffix} %s" "$inB"
                case $(Read_user_input) in
                    [Yy]*)  echo -e "\n${out_EXEC} ${green}Installing [ ibus-rime ].${suffix}"; sleep 2s
                            Install_Program "$CONF_PKG_Ibus" 
                            configure_ibus;;
                        *) echo -e "${out_SKIP} ${white}[ ibus-rime ].${suffix}\n"
                esac
        esac 
    }
    function remove(){
        # awk '/ibus/{print NR}' /etc/environment
        sed -i '/ibus/d' /etc/environment
        sed -i '/ibus/d' /etc/profile
        rm -rf "$HOME"/.config/ibus
        pacman -Rsc --noconfirm "$CONF_PKG_Ibus"
    }
    case $1 in 
        -R) remove; local status=true ;;
        * ) echo -e "${out_ERROR} ${green}Input error or the option does not exist.${suffix}" 
            # echo -e "${white}::${yellow} [ Usage ] =>${suffix} ${green}${0##*/} ibus [ -S ] = install, [ -R ] = uninstall.${suffix}"
            local status=true
    esac
    if [[ ! ${status} == true ]]; then install; fi 
}

# @Pacman multi threaded download [Axel]
function Axel_Configure() {
    Read_Axel_Thread=$(Config_File_Manage CONF Read "Axel_Thread")
    Axel="XferCommand = \/usr\/bin\/axel -n $Read_Axel_Thread -a -o %o %u"
    case $1 in 
        -R) rm -rf /etc/axelrc
            sed -i "s/$Axel/ /" /etc/pacman.conf
            local status=true;;
        * ) echo -e "${out_ERROR} ${green}Input error or the option does not exist.${suffix}" 
            # echo -e "${white}::${yellow} [ Usage ] =>${suffix} ${green}${0##*/} ibus [ -S ] = install, [ -R ] = uninstall.${suffix}"
            local status=true
    esac
    if [[ ! ${status} == true ]]; then
        Install_Program axel
        echo "alternate_output = 1" > /etc/axelrc
        sed -i "/#XferCommand = \/usr\/bin\/curl/i ${Axel}" /etc/pacman.conf
    fi
}

# @Install I/O Driver 安装驱动
function Install_Io_Driver(){
    # 读取配置 
    CONF_Driver_Audio=$(Config_File_Manage CONF Read "Install_Driver_Audio")
    CONF_Driver_input=$(Config_File_Manage CONF Read "Install_Driver_Input")
    CONF_Driver_Bluez=$(Config_File_Manage CONF Read "Install_Driver_Bluetooth")
    # 读取包名
    CONF_PKG_INTEL=$(Config_File_Manage CONF Read "PGK_Intel")
    CONF_PKG_AMD=$(Config_File_Manage CONF Read "PGK_Amd")
    CONF_PGK_Audio_Driver="$(Config_File_Manage CONF Read "PGK_Audio_Driver")"
    CONF_PGK_Input_Driver="$(Config_File_Manage CONF Read "PGK_Input_Driver")"
    CONF_PGK_Bluez_Driver="$(Config_File_Manage CONF Read "PGK_Bluetooth_Driver")"
    # CPU
    case $CPU_Vendor in
    intel)  echo -e "\n${out_EXEC} ${green}Install the Intel driver.${suffix}"; sleep 2s
            Install_Program "$CONF_PKG_INTEL";;
      amd)  echo -e "\n${out_EXEC} ${green}Install the Amd driver.${suffix}"; sleep 2s
            Install_Program "$CONF_PKG_AMD";;
        *)  printf "${outG} ${yellow}Please select: Intel[1] AMD[2].${suffix} %s" "$inB"
            case $(Read_user_input) in
                1)  echo -e "\n${out_EXEC} ${green}Install the Intel driver.${suffix}"; sleep 2s
                    Install_Program "$CONF_PKG_INTEL";;
                2)  echo -e "\n${out_EXEC} ${green}Install the Amd driver.${suffix}"; sleep 2s
                    Install_Program "$CONF_PKG_AMD";;
            esac
    esac
    # 安装音频驱动 
    case $CONF_Driver_Audio in 
        yes) echo -e "${out_EXEC} ${green}Installing Audio driver.${suffix}"; sleep 2s
             Install_Program "$CONF_PGK_Audio_Driver"
             systemctl enable alsa-state.service;;
        *)   echo -e "${out_SKIP} ${green}Installing audio driver.${suffix}"
    esac
    # 安装 I/O 驱动 
    case $CONF_Driver_input in 
        yes) echo -e "${out_EXEC} ${green}Installing input driver.${suffix}"; sleep 2s
             Install_Program "$CONF_PGK_Input_Driver";;
        *)   echo -e "${out_SKIP} ${green}Installing audio driver..${suffix}"
    esac 
    # 安装蓝牙驱动
    case $CONF_Driver_Bluez in 
        yes) echo -e "${out_EXEC} ${green}Installing Bluetooth driver.${suffix}"; sleep 2s
             Install_Program "$CONF_PGK_Bluez_Driver"
             echo "load-module module-bluetooth-policy" >> /etc/pulse/system.pa
             echo "load-module module-bluetooth-discover" >> /etc/pulse/system.pa;;
        *)   echo -e "${out_SKIP} ${green}Installing bluetooth driver.${suffix}"
    esac 
}

# @Install/Configure Grub, 安装并配置Grub
function Configure_Grub(){
    echo -e "\n${out_EXEC} ${green}Install grub tools.${suffix}\n"
    echo -e "${out_WELL} ${white}Your startup mode has been detected as ${green}$INFO_Boot_way${suffix}.\n"   
    CONF_PKG_GRUB_UEFI="$(Config_File_Manage CONF Read "PGK_GRUB_UEFI")"
    CONF_PKG_GRUB_BOOT="$(Config_File_Manage CONF Read "PGK_GRUB_BOOT")"
    sleep 2;
    case "$INFO_Boot_way" in 
        UEFI)
            Install_Program "$CONF_PKG_GRUB_UEFI"
            grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="$CONF_Hostname" --recheck
            echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
            if efibootmgr | grep "$CONF_Hostname" &>/dev/null ; then
                echo -e "\n${out_WELL} ${green} Grub installed successfully -=> [$CONF_Hostname] ${suffix}"  
                echo -e "${green}     $(efibootmgr | grep "$CONF_Hostname")  ${suffix}\n"  
                sleep 2s
            else
                echo -e "\n${out_ERROR} ${red}Grub installed failed ${suffix}"
                echo -e "${green}     $(efibootmgr)  ${suffix}\n"
            fi
        ;;
        BIOS)
            Install_Program "$CONF_PKG_GRUB_BOOT"
            local INFO_Boot_partition
            INFO_Boot_partition=$(Config_File_Manage INFO Read "Boot_partition") 
            grub-install --target=i386-pc --recheck --force "$INFO_Boot_partition"
            grub-mkconfig -o /boot/grub/grub.cfg
            if echo $? &>/dev/null ; then
                echo -e "\n${out_WELL} ${green} Grub installed successfully -=> [Archlinux] ${suffix}\n"  
                sleep 2s
            else
                echo -e "\n${out_ERROR} ${red} Grub installed failed ${suffix}\n"
            fi
    esac  
}
# @配置本地化 时区 主机名 语音等  
function Configure_Language(){
        echo -e "${out_EXEC} ${white}Configure enable Network.${suffix}"; sleep 1s
    systemctl enable NetworkManager
        echo -e "${out_EXEC} ${white}Time zone changed to 'Shanghai'. ${suffix}"; sleep 1s
    ln -sf /usr/share/zoneinfo/"$(Config_File_Manage INFO Read "Timezone")" /etc/localtime &>/dev/null && hwclock --systohc --utc # 将时区更改为"上海" / 生成 /etc/adjtime
        echo -e "${out_EXEC} ${white}Set the hostname \"$CONF_Hostname\". ${suffix}"; sleep 1s
    echo "$CONF_Hostname" > /etc/hostname
        echo -e "${out_EXEC} ${white}Localization language settings. ${suffix}"; sleep 1s
    sed -i 's/#.*en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
        echo -e "${out_EXEC} ${white}Write 'en_US.UTF-8 UTF-8' To /etc/locale.gen. ${suffix}"; sleep 1s  
    sed -i 's/#.*zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
        echo -e "${out_EXEC} ${white}Write 'zh_CN.UTF-8 UTF-8' To /etc/locale.gen. ${suffix}"; sleep 1s 
    locale-gen
        echo -e "${out_EXEC} ${white}Configure local language defaults 'en_US.UTF-8'. ${suffix}"; sleep 1s  
    echo "LANG=en_US.UTF-8" > /etc/locale.conf       # 系统语言 "英文" 默认为英文   
    sleep 3;
}
# @Install/Configure virtualbox-guest-utils / open-vm-tools, 安装虚拟化插件
function install_virtualization_service(){
    CONF_PKG_VMWARE="$(Config_File_Manage CONF Read "PGK_Vmware")"
    CONF_PKG_VIRTUALBOX="$(Config_File_Manage CONF Read "PGK_VirtualBox")"
    case "$1" in
        vmware)
            Install_Program "$CONF_PKG_VMWARE"
            systemctl enable vmtoolsd.service
            systemctl enable vmware-vmblock-fuse.service
            systemctl start vmtoolsd.service
            systemctl start vmware-vmblock-fuse.service
        ;;
        virtualbox)
            Install_Program "$CONF_PKG_VIRTUALBOX"
            systemctl enable vboxservice.service
            systemctl start vboxservice.service
        ;;
        *) echo -e "\n${out_ERROR} ${white}This computer is not virtualized.${suffix}"
    esac
}
# @Archlive update tips 
function Archiso_Version_Testing(){
    Version_Route="${1}"
    Time_Archiso=$(sed 's/\./-/g' "$Version_Route")
    Time_interval=$((($(date +%s) - $(date -d "$Time_Archiso 00:00:00" +%s)) / 2605391 ))
    Config_File_Manage INFO Write Livecd_version "${Time_Archiso:- }";
    case $Time_interval in
        [0])    ;;
        [1])    printf "\n${out_WARNING} ${white}Please update as soon as possible Livecd ! \n${out_WARNING} ${white}Livecd Version: %s.\n${suffix}" "$Time_Archiso"; sleep 1 ;;
        [2])    printf "\n${out_WARNING} ${white}You haven't updated in more than 2 month Livecd ! \n${out_WARNING} ${white}Livecd Version: %s.\n${suffix}" "$Time_Archiso"; sleep 2 ;;
        [3])    printf "\n${out_WARNING} ${white}You haven't updated in more than 3 month Livecd ! \n${out_WARNING} ${white}Livecd Version: %s.\n${suffix}" "$Time_Archiso";
                printf "\n${outY} ${yellow} Whether to start the script [Y/n]:${suffix} %s" "$inB"
                    case $(Read_user_input) in
                        [Yy]*)  sleep 1 ;;
                            *)  clear; echo -e "${out_WARNING} ${white}Please update Livecd.${suffix}"; exit 30 ;;
                    esac ;;
        *)      printf "\n${out_ERROR} ${white}You haven't updated Livecd for a long time ! \n${out_WARNING} ${white}Livecd Version: %s.\n${suffix}" "$Time_Archiso"
                echo -e "${out_WARNING} ${white}Please update your Livecd!!! After 10 seconds Exit(Ctrl+c).${suffix}"; sleep 10; exit 1 ;;
    esac
}

# @Stript Management; 脚本进程管理 [start]开启 [restart]重新开启 [stop]杀死脚本进程
function Process_Management(){
    PM_Enter_1=${1}
    PM_Enter_2=${2}
    case ${PM_Enter_1} in
        start  ) bash "$Process_Script" start   "${PM_Enter_2}" ;;
        restart) bash "$Process_Script" restart "${PM_Enter_2}" ;;
        stop   ) bash "$Process_Script" stop    "${PM_Enter_2}" ;;
    esac
}
# @安装系统
function Installation_System(){
    INFO_Root_partition=$(Config_File_Manage INFO Read "Root_partition")  
    if [ -n "$INFO_Root_partition" ]; then  # 后续待修改部分
        Install_Archlinux
    else
        echo -e "${out_WARNING} ${white}The partition is not mounted.${suffix}"; 
        sleep 3; Process_Management restart "$0"
    fi
    bash "$Print_INFO" InstallSystemInfo
    sleep 3; echo;    # Chroot到新系统中完成基础配置
    cp -rf /etc/pacman.conf $System_Root/etc/pacman.conf 
    cp -rf /etc/pacman.d/mirrorlist $System_Root/etc/pacman.d/mirrorlist
    echo "No" > $System_Root/local/Config_System
    Auin_chroot
}
# @配置系统
function Configure_System(){
    Disk_Kernel=$(cat /usr/src/linux/version)
    INFO_Install_Kernel=$(Config_File_Manage INFO Read "LinuxKernel")
    CONF_PGK_Terminal_Tools=$(Config_File_Manage CONF Read "PGK_Terminal_Tools")
    CONF_PKG_SystemctlFile=$(Config_File_Manage CONF Read "PKG_SystemctlFile")
    CONF_PGK_Common_Package=$(Config_File_Manage CONF Read "PGK_Common_Package")
    if [ -n "$INFO_Install_Kernel" ] || [ -n "$Disk_Kernel" ] ; then 
        Configure_Grub
        #---------------------------------------------------------------------------#
        echo -e "${out_EXEC} ${green}Install the Terminal tools packages.${suffix}"; sleep 1s
        Install_Program "$CONF_PGK_Terminal_Tools"
        echo -e "${out_EXEC} ${green}Install the System file package.${suffix}"; sleep 1s
        Install_Program "$CONF_PKG_SystemctlFile"
        echo -e "${out_EXEC} ${green}Install the Other common package.${suffix}"; sleep 1s
        Install_Program "$CONF_PGK_Common_Package"
        Configure_Language
        ConfigurePassworld
        INFO_UserName=$(Config_File_Manage INFO Read "Users")
        INFO_UsersID=$(id -u "$INFO_UserName" 2> /dev/null)
        printf "${outG} ${green}A normal user already exists, The UserName:${suffix} ${blue}%s${suffix} ${green}ID: ${blue}%s${suffix}.\n" "${CheckingUsers:-$INFO_UserName}" "${CheckingID:-$INFO_UsersID}"
        rm -rf "$Local_Dir"/Config_System; # 删除这个文件，才能进 Normal_Model  
        if [ "$(Config_File_Manage CONF Read "Archlinucn")" = "yes" ]; then Install_Program archlinuxcn-keyring; fi
        if [ "$(Config_File_Manage CONF Read "Blackarch")" = "yes" ]; then Install_Program blackarch-keyring; fi
        bash "$Fonts_Script" "${Share_Dir}" "${Local_Dir}" Config_file_install_fonts "$Source_Local"
        bash "$Print_INFO" ConfigSystemInfo; sleep 3
    else
        echo -e "${out_ERROR} ${red}The system is not installed. Exec: 4->2 ${suffix}";sleep 3;
        Process_Management restart "$0"
    fi
    rm -rf "$Local_Dir"/Config_System 2> /dev/null
}
# @磁盘分区
function Disk_Partition(){
    bash "$Partition_Script" "${Auins_Profile}" "${Auins_Infofile}"; 
    sleep 1; bash "${0}"
}

# @删除脚本和缓存
function Delete_Script(){
    echo -e "${out_WARNING} ${yellow}Deleting scripts and cache!${suffix}"; sleep 1
    sudo pacman -Scc
    rm -rf "$Share_Dir"
    rm -rf "$Local_Dir"
    echo -e "\n${out_WELL} ${green} ʕ ᵔᴥᵔ ʔ Bye-bye~ ${suffix}\n"
    rm -rf "$0" && sleep 10;
}     
# @ Archiso LiveCD 下自动启用
function LiveCD_Model(){
    bash "$Print_INFO" logos "$Script_Version" "$Boot_Type $Disk_Type" "$ChrootPatterns_Print" "$StartPatterns" "$CPU_Name";
    bash "$Print_INFO" LivecdHomeList;   
    echo -e "\n${Chroot_status:- }"
    printf "${outG} ${yellow} Please enter[1,2,3..] Exit[Q]${suffix} %s" "$inB"
    case $(Read_user_input) in
        1)  bash "$Mirrorlist_Script" "${Auins_Profile}" "${Auins_Infofile}" ; bash "${0}" ;; # 配置源
        2)  Network Conf_all;; # 配置网络
        3)  Open_SSH ;; # 配置SSH
        4) # 二级列表 隐
            bash "$Print_INFO" Livecd_System_Module_List;
            echo -e "${input_System_Module_Chroot:- \n}"
            printf "${outG} ${yellow} Please enter[1,2,21..] Exit[Q] ${suffix}%s" "$inB"
            case $(Read_user_input) in
                0)  Auin_chroot ;;
                1)  Disk_Partition ;; # 磁盘分区 隐
                2)  Installation_System ;; # 安装系统 隐 
                3)  Configure_System ;; # 配置系统 隐
                4)  ConfigurePassworld; bash "$Desktop_Script" "${Share_Dir}" "${Local_Dir}" ;; # 安装桌面
                11) Install_Io_Driver ;;  # 安装I/O驱动
                22) install_virtualization_service "$Host_Environment"; sleep 3; bash "$0" ;; # 安装Vm tools
                esac ;;
        [Rr]*) bash "$0" ;;
        [Qq]*) Process_Management stop "$0" ;;
        [Ss]*) bash ;;
    esac
}
# @ 安装完Archlinux后 正常可用情况下自动启用
function Normal_Model(){
    bash "$Print_INFO" logos "$Script_Version" "$Boot_Type $Disk_Type" "$ChrootPatterns_Print" "$StartPatterns" "$CPU_Name";
    bash "$Print_INFO" NormalHomeList;   
    echo -e "\n${Chroot_status:- }"
    printf "${outG} ${yellow} Please enter[1,2,3..] Exit[Q]${suffix} %s" "$inB"
    case $(Read_user_input) in
        1)  bash "$Mirrorlist_Script" "${Auins_Profile}" "${Auins_Infofile}" ; bash "${0}" ;; # 配置源
        2)  Network Conf_all;; # 配置网络
        3)  Open_SSH ;; # 配置SSH
        4)  ConfigurePassworld; bash "$Desktop_Script" "${Share_Dir}" "${Local_Dir}" ;; # 安装桌面
        5)  Install_Io_Driver;; # 安装I/O驱动
        6)  install_virtualization_service "$Host_Environment"; sleep 3; bash "$0" ;; # 安装Vm tools
        [Dd]) Delete_Script ;;
        [Rr]*) bash "$0" ;;
        [Qq]*) Process_Management stop "$0" ;;
        [Ss]*) bash ;;
    esac
}

# @Auins的其他选项功能
function Auins_Options(){
    case "${1}" in
    # Install Commands: ("-S = install", "-R = uninstall")
        font ) bash "$Fonts_Script" "${Share_Dir}" "${Local_Dir}" User_options_install_fonts "$Source_Local" "$2"; exit 0 ;;
        fcitx) Configure_fcitx "$2"; exit 0 ;;
        ibus ) Configure_ibus_rime "$2"; exit 0 ;;
        axel ) Axel_Configure "$2";;
        inGpu) echo -e "${out_WARNING} ${white}Functional improvement in progress...${suffix}"; exit 0 ;;
        inVmt) install_virtualization_service "$Host_Environment"; exit 0 ;;
    # Settings Options:
        -m | --mirror ) bash "$Mirrorlist_Script" "$Auins_Profile" "$Auins_Infofile"; exit 0 ;;
        -w | --wifi   ) Network Conf_wifi; exit 0 ;;
        -s | --openssh) 
                        case "$CONF_Service_SSH" in
                            yes) echo -e "${outG} ${green} activated. ${suffix}"; exit 0;;
                            *  )  Open_SSH; exit 0;;
                        esac ;;
    # Global Options:
        -e | --edit-conf  ) vim "${Auins_Profile}"; exit 0 ;;
        -f | --view-conf  ) less "${Auins_Profile}"; exit 0 ;;
        -i | --view-info  ) clear; less "${Auins_Infofile}"; exit 0 ;;
        -c | --clean-cache) Delete_Script; exit 0 ;;
        -h | --help       ) bash "$Print_INFO" Auins_usage; exit 0 ;;
        -v | --version    ) bash "$Print_INFO" version; exit 0 ;;
    esac
}

# Start Script | 从这里开始
# >> >> >> >> >> >> >> >> >> >> >> >> 
Script_Variable_init 
Set_Color_Variable  
Update_Share URL "$SCRIPTS_SOURCE"  # 锁定脚本下载源
Update_Share Download_Script        # 下载脚本需要的脚本
Script_init
Network INFO
# 具体的实现
if ! groups "$(whoami)" | grep -i "root" &>/dev/null ; then 
    echo -e "\n${out_ERROR} ${red}There is currently no execute permission.${suffix}" 
    echo -e "${out_ERROR} ${red}Please use ${green}\"command: sudo\"${red} or ${green}\"user: root\"${red} to execute.${suffix}\n"
fi
Auins_Options "${1}" "${2}"
case "${ChrootPatterns}" in 
    Chroot-OFF)
        ChrootPatterns_Print="${white}[${red}Chroot-OFF${white}]${suffix}";     
        input_System_Module_Chroot="${outY} ${yellow}   arch-chroot ${System_Root}.      ${red}**  ${white}[0]  ${suffix}\n"
        if [ -e "$System_Root/local/LiveCD_OFF" ]; then # 如果LiveCD_OFF存在于新系统，将自动chroot
            Auin_chroot 2> /dev/null; 
        fi 
        if [ -e "$Local_Dir"/LiveCD ]; then 
            StartPatterns="${white}[${green}LiveCD${white}]${suffix}"
            LiveCD_Model; 
        fi 
        case $Normals in 
            [Yy]*)  StartPatterns="${white}[Normal]${suffix}"
                    Normal_Model; 
        esac
    ;;
    Chroot-ON) 
        ChrootPatterns_Print="${white}[${green}Chroot-ON${white}]${suffix}"
        Chroot_status="${outG}  ${wg}Successfully start: Chroot.${suffix}"
        # Tasks_Auin_chroot="0"
        if [ -e "$Local_Dir"/Config_System ]; then 
            StartPatterns="${white}[${green}LiveCD${white}]${suffix}"
            LiveCD_Model; 
        else 
            StartPatterns="${white}[Normal]${suffix}"
            Normals="yes"
            Normal_Model
        fi
esac

# 模块使用方法, 以下有部分重新定义了名称
: << EOF
    Mirrorlist_Script [无]
    Users_Script [Auins_Profile] [Auins_Infofile]
    Partition_Script [Auins_Profile] [Auins_Infofile]
    Desktop_Script 待完善
    Process_Script [start | restart | stop] [command]
    Fonts_Script [Share_Dir] [Local_Dir] [使用什么方式运行
                                            Config_file_install_fonts:   根据配置文件, 安装相应的字体
                                            User_options_install_fonts:  根据用户选项, 安装相应的字体, 用户的选项有: [all] [common] [adobe] [code]
                                            Script_Runing_install_fonts: 脚本运行时, 由脚本自动判断, 自动安装配置文件中的选项, 另外询问是否安装其他
                                            [字体下载URL] [用户的选择]
    Print_INFO [想要输出的信息:
                version:    Auins版本信息
                logos:      Script首页信息, 需要接收: 1=版本号, 2=引导类型, 3=磁盘类型, 4=Chroot状态, 5=脚本开启模式, 6=CPU名称
                SSH_INFO:   输出SSH信息, 需要接收: 1=用户名, 2=用户密码, 3=有线IP, 4=无线IP
                Auins_usage:    Auins的帮助文档 Auin_help
                LivecdHomeList: LiveCD环境下, 首页会显示的列表
                NormalHomeList: 正常(Normal)环境下, 首页会显示的列表
                DesktopEnvList: 桌面环境的选择列表
                DesktopManagerList:         桌面管理器的选择列表
                Livecd_System_Module_List:  首选项 [4] 的列表
                InstallSystemInfo:          系统安装成功, 直奔加入chroot的提示信息
                ConfigSystemInfo:           完成系统配置成功, 可重启的提示信息
                JetBrainsFira_font_usage:   JetBrainsFira字体安装完成后的使用说明
                ] [附加输入的信息]......
EOF

# >> >> >> >> >> >> >> >> >> >> >> >>
# reflector --country China  --protocol http --protocol https

################################################################################
################# Arch Linux mirrorlist generated by Reflector #################
################################################################################

# With:       reflector --country China --protocol http --protocol https
# When:       2023-04-07 06:52:04 UTC
# From:       https://archlinux.org/mirrors/status/json/
# Retrieved:  2023-04-07 06:52:03 UTC
# Last Check: 2023-04-07 06:41:56 UTC

# Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.hit.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.hit.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch
# Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch
# Server = http://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch

# mirror_file="mirror"
# list_number=$(wc -l $mirror_file | awk -F " " '{print $1}')

# Server_list=$(sed -n "$(( "$list_number" - 1 ))"p $mirror_file)



# ping -A -c 1

# @System boot
# function Configure_Systemd_boot(){
#     PGK_SYSTEMD_BOOT="$(Config_File_Manage CONF Read "PGK_SYSTEMD_BOOT")"
#     Install_Program "$PGK_SYSTEMD_BOOT"
#     bootctl install
#     echo "options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/nvme0n1p2) rw" >> /boot/loader/entries/arch.conf
#     bootctl update
#     systemctl enable fstrim.timer
# }




