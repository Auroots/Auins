#!/usr/bin/env bash
# Author/Wechat: Auroot
# Script name: Auins (ArchLinux User Installation Scripts) 
# URL GitHub: https://github.com/Auroots/Auins
# URL Gitee : https://gitee.com/auroot/Auins
# set -xe
# set -eu
echo &>/dev/null
export AUINS_SCRIPT_NAME SOURCE_SHARE SOURCE_LOCAL TIME_ARCHISO SCRIPTS_SOURCE
export BOOT_TYPE DISK_TYPE CHROOT_PATTERNS_PRINT START_PATTERNS AUINS_VERSION
export LOCAL_ETHERNET_IP ETHERNET_NAME LOCAL_WIFI_IP WIFI_NAME

# @ script source
# auroot  |  gitee  |  github  |  test
SCRIPTS_SOURCE="test"
AUINS_VERSION="ArchLinux User Install Scripts v4.6 r8" 

# @待解决的问题 
: << EOF
    - [x] 优化: 部分语法;
    - [ ] 检查reflector报错的问题(不影响正常使用);
    - [ ] 新增: (v4.5)快照备份软件(timeshift)，开启方式：配置文件，默认开启;
    - [x] 修改: (v4.5)配置系统不再自动安装字体,只有安装桌面环境后,才会提示;
    - [?] 修复: (v4.5)解决不输入Root密码,自动跳过; ?检查代码未发现问题
    - [ ] 修复: (v4.5)解决设置Swap大小不成功或自动跳过的问题 (虚拟机下正常;
    - [x] 修复: (v4.5)选择磁盘时,无法识别nvme名称;
    - [x] 修复: (v4.5)非root权限运行脚本时,不会终止;
    - [x] 修复: (r4)无法正确配置时区;
    - [x] 新增: (r5)pacman多线程下载(axel)，开启方式：配置文件中或脚本选项;
    - [x] 新增: (r5)输入法(ibus-rime)，开启方式：配置文件中或脚本选项;
    - [x] 新增: (r5)脚本选项逻辑,加入set选项,将设置选项归类;
    - [x] 新增: (r5)独立的字体安装模块;
    - [x] 新增: (r5)独立的信息输出模块;
    - [x] 修复: (r5)Process_Manage无法关闭多个进程;
    - [x] 修复: (r6)首页信息输出不全;
    - [x] 修改: (r6)archiso第一个月的更新提示,只在脚本结束任务后显示;
    - [x] 新增：(r7)加入BlackArch setup脚本;
    - [x] 新增：(r7)随时更新脚本的功能,在 profile.conf 中开启;
    - [x] 修复：(r7)USB无线网卡无法正常识别;
    - [x] 修复: (r7)修补桌并完善桌面模块;
    - [ ] 修复: (r8)多网卡时，无法正常显示;
EOF

# sed -i.bak 's/^aaa=yes/aaa=no/' [file] # 替换并备份
# @脚本初始化
function Script_Variable_init(){
    Auins_Dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )
    [ "$Auins_Dir" = "/" ] && Auins_Dir=""
    AUINS_SCRIPT_NAME=auins
    Share_Dir="${Auins_Dir}/share" 
    Local_Dir="${Auins_Dir}/local" 
    Auins_Profile="${Local_Dir}/profile.conf"  
    Auins_Infofile="${Local_Dir}/auins.info"  
    Auins_api_file="${Local_Dir}/api.json"  
    Mirrorlist_Script="${Share_Dir}/Mirrorlist_Manage.sh"
    Users_Script="${Share_Dir}/Users_Manage.sh"
    Partition_Script="${Share_Dir}/Partition_Manage.sh"
    Desktop_Script="${Share_Dir}/Desktop_Manage.sh"
    Process_Script="${Share_Dir}/Process_Manage.sh"
    Fonts_Script="${Share_Dir}/Fonts_Manage.sh"
    Print_Info_Script="${Share_Dir}/Print_Info.sh"
    Blarckarch_Script="${Share_Dir}/blackarch_strap.sh"
    System_Root="/mnt"
    Livecd_Version_Route="/run/archiso/airootfs/version"
    # entries_Boot="/sys/firmware/efi/efivars"  # discern: UEFI
    if [ ! -d "$Local_Dir" ]; then mkdir -p "$Local_Dir"; fi
    if [ ! -d "$Share_Dir" ]; then mkdir -p "$Share_Dir"; fi
    if [ ! -f "$Auins_Profile" ]; then touch "$Auins_Profile"; fi

}

# 模块使用方法, 以下有部分重新定义了名称
# @modules
function update_mirrors(){ bash "$Mirrorlist_Script" "$Auins_Profile" "$Auins_Infofile"; }
function configure_user(){ bash "$Users_Script" "$Auins_Profile" "$Auins_Infofile"; }
function configure_desktop(){ bash "$Desktop_Script" "${Share_Dir}" "${Local_Dir}"; }
function blarckarch_script(){ bash "$Blarckarch_Script"; }
function configure_partition(){
    bash "$Partition_Script" "$Auins_Profile" "$Auins_Infofile" || exit 1; 
    sleep 1; bash "${0}"
}
# @Process_Management; 脚本进程管理 [start]开启 [restart]重新开启 [stop]杀死脚本进程
function process_management(){
    PM_Enter_1=${1}
    PM_Enter_2=${2}
    PM_Enter_3=${3}
    case ${PM_Enter_1} in
        start)   bash "$Process_Script" start "${PM_Enter_2}" "${PM_Enter_3}" ;;
        restart) bash "$Process_Script" restart "${PM_Enter_2}" "${PM_Enter_3}" ;;
        stop)    bash "$Process_Script" stop "${PM_Enter_2}" "${PM_Enter_3}"
    esac
}
function configure_fonts(){
    # $1 = Config_file_install_fonts:   根据配置文件, 安装相应的字体
    # $1 = User_options_install_fonts:  根据用户选项, 安装相应的字体, $2 = 用户的选项有: [all] [common] [adobe] [code]
    # $1 = Script_Runing_install_fonts: 脚本运行时, 由脚本自动判断, 自动安装配置文件中的选项, 另外询问是否安装其他
    bash "$Fonts_Script" "$Share_Dir" "$Local_Dir" "$SOURCE_LOCAL" "$1" "$2"
}
function print_info(){
    # version:    Auins版本信息
    # logos:      Script首页信息, 需要接收: 1=Chroot状态(CHROOT_PATTERNS_PRINT) 2=脚本开启模式(START_PATTERNS) 
    # ssh_info:   输出SSH信息
    # auins_usage:      Auins的帮助文档 Auin_help, (无需任何参数)
    # livecd_home_list: LiveCD环境下, 首页会显示的列表, (无需任何参数)
    # normal_home_list: 正常(Normal)环境下, 首页会显示的列表, (无需任何参数)
    # desktop_env_list: 桌面环境的选择列表, (无需任何参数)
    # desktop_manager_list:       桌面管理器的选择列表, (无需任何参数)
    # livecd_system_module_list:  首选项 [4] 的列表, (无需任何参数)
    # install_system_info:        系统安装成功, 直奔加入chroot的提示信息, (无需任何参数)
    # config_system_info:         完成系统配置成功, 可重启的提示信息, (无需任何参数)
    # JetBrainsFira_font_usage:   JetBrainsFira字体安装完成后的使用说明, (无需任何参数)
    bash "$Print_Info_Script" "$1" "$Auins_Profile" "$Auins_Infofile" "$2" "$3"
}

# Error message wrapper
function err(){ echo -e >&2 "\033[1;37m:: $(tput bold; tput setaf 1)[ x Error ] => \033[1;31m${*}\033[0m$(tput sgr0)"; exit 255; } 
# Warning message wrapper
function warn(){ echo -e >&2 "\033[1;37m:: $(tput bold; tput setaf 3)[ ! Warning ] => \033[1;33m${*}\033[0m$(tput sgr0)"; }
# Run message wrapper
function run() { echo -e "\033[1;37m:: $(tput bold; tput setaf 2)[ + Exec ] => \033[1;32m${*}\033[0m$(tput sgr0)"; }
# Skip message wrapper
function skip() { echo -e "\033[1;37m:: $(tput bold; tput setaf 0)[ - Skip ] => ${*}\033[0m$(tput sgr0)"; }
# @获取用户输入，并返回
function Read_user_input(){ local user_input; read -r user_input; echo "$user_input"; }
# Tips output colour: white
function tips_white() { printf "\033[1;37m:: $(tput bold; tput setaf 2)\033[1;37m%s \033[1;32m-+> \033[0m$(tput sgr0)" "${*}"; }
  # feedback successfully info
function feed_status(){ 
    if [ $? = 0 ]; then 
        echo -e "\033[1;37m:: $(tput bold; tput setaf 2)=> \033[1;32m${1}\033[0m$(tput sgr0)"; 
    else 
        err "$2"
    fi
}
# check for root privilege
function check_priv()
{
  if [ "$(id -u)" -ne 0 ]; then
    # err "you must be root"
    err "Please use command: ${white}\"sudo\"${red} or user: ${white}\"root\"${red} to execute.${suffix}"
  fi
}

# 地址: auins.info(INFO)| script.conf(CONF)
# 读取: Config_File_Manage [INFO/CONF] [Read] [头部参数]
# 写入: Config_File_Manage [INFO/CONF] [Write] [头部参数] [修改内容]
function Config_File_Manage(){ 
    local format=" = "; parameter="$3"; content="$4";
    case "$1" in
        INFO) local Files="$Auins_Infofile" ;;
        CONF) local Files="$Auins_Profile" ;;
    esac
    case "$2" in
        Read ) 
                read_info=$(grep -w "$parameter" < "$Files") # 在文件中查找匹配的值
                if [ -n "$read_info" ]; then 
                    echo "$read_info" | awk -F "=" '{print $2}' | awk '{sub(/^[\t ]*/,"");print}' | awk '{sub(/[\t ]*$/,"");print}' 
                else
                    warn "Read file: $Files, missing value [${white} $parameter  ${yellow}]."
                    sleep 3
                fi
         ;;
        Write) 
                List_row=$(grep -nw "$parameter" < "$Files" | awk -F ":" '{print $1}';) # 在文件中查找匹配的值, 并打印行号
                if [ -n "$List_row" ]; then
                    sed -i "${List_row}c ${parameter}${format}${content}" "$Files" 2>/dev/null
                else
                    warn "Write file: $Files, missing value [${white} $parameter  ${yellow}] + [${white} $content ${yellow}]."
                    sleep 3
                fi
    esac 
}

# @install Programs 安装包
function Install_Progsram() {
    # arch-chroot ${MNT_DIR} bash -c "$COMMAND"
    set +e
    IFS=' '; PACKAGES=("$@");
    for VARIABLE in {1..3}
    do
        local COMMAND="pacman -Syu --noconfirm --needed ${PACKAGES[@]}"
        if ! bash -c "$COMMAND" ; then
            break;
        else
            sleep 3; break;
        fi
    done
    echo "$VARIABLE" &> /dev/null
    set -e
}

# @脚本自检
function Script_init(){
    # Read Profile.conf
    CONF_Hostname=$(Config_File_Manage CONF Read Hostname)
    CONF_Password_SSH=$(Config_File_Manage CONF Read Password_SSH)
    CONF_Service_SSH=$(Config_File_Manage CONF Read Service_SSH)

    # 写入Auins版本
    Config_File_Manage INFO Write Auins_version "$AUINS_VERSION"

    # 查询并写入CPU信息
    CPU=$(head -n 5 /proc/cpuinfo | grep "model name" | awk -F ": " '{print $2}')
    lscpu | grep GenuineIntel &>/dev/null && CPU_Vendor="intel";
    lscpu | grep AuthenticAMD &>/dev/null && CPU_Vendor="amd";
    Config_File_Manage INFO Write CPU "$CPU"
    Config_File_Manage INFO Write CPU_Vendor "$CPU_Vendor"

    # 查询并写入GPU信息
    not_intercept_gpu_info=$(lspci | grep -i VGA | awk -F ":" '{print $3}' | sed 's/^[ ]*//g')
    intercept_gpu_info=$(lspci  | grep -i VGA | awk -F ":" '{print $3}' | grep -o '\[.*\]')
    Unrecognized=$(echo -e "${white}Unrecognized${suffix}")
    GPU_Info_0="${intercept_gpu_info:-$not_intercept_gpu_info}"
    GPU="${GPU_Info_0:-$Unrecognized}"
    Config_File_Manage INFO Write GPU "$GPU"

    Memory=$(($(sed -n '1,1p' /proc/meminfo | awk '{print $2}')/1000))
    Config_File_Manage INFO Write Memory "$Memory"

    # 查询并写入主机环境信息
    lspci | grep -i "virtualbox" &>/dev/null && Host_Environment="VirtualBox";
    lspci | grep -i "vmware" &>/dev/null     && Host_Environment="Vmware"; 
    [[ $Host_Environment == "" ]] && Host_Environment="Computer"
    Config_File_Manage INFO Write Host_Environment "$Host_Environment";

    # 查询并写入Chroot模式
    if [ -e /local/Chroot ]; then  ChrootPatterns="Chroot-ON"; else ChrootPatterns="Chroot-OFF"; fi
    Config_File_Manage INFO Write ChrootPatterns "$ChrootPatterns";
    
    # 查询并写入Boot类型
    if [ -d /sys/firmware/efi ]; then
        BOOT_TYPE="UEFI" DISK_TYPE="GPT"
    else
        BOOT_TYPE="BIOS" DISK_TYPE="MBR"
    fi
    Config_File_Manage INFO Write Boot_Type ${BOOT_TYPE}
    Config_File_Manage INFO Write Disk_Type ${DISK_TYPE}
    INFO_Boot_way=$(Config_File_Manage INFO Read "Boot_Type")
    
    # 查询并写入地区 IP 国家
    Country_Name=$(Config_File_Manage INFO Read "Country_Name")
    if [ -z  "$Country_Name" ] ; then
        curl -fsSL --fail https://ipapi.co/json > "$Auins_api_file"
        CONF_Timezone=$(Config_File_Manage CONF Read Timezone)
        if [[ "$CONF_Timezone" == "" ]]; then
            API_Timezone=$(grep -w "timezone" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')
            Config_File_Manage INFO Write Timezone "$API_Timezone"
        else
            Config_File_Manage INFO Write Timezone "$CONF_Timezone";
        fi
        # 从api中获取ip，国家，时区信息，写入到info文件，暂时无其他作用
        API_Public_IP=$(grep -w "ip" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')      && Config_File_Manage INFO Write Public_IP "$API_Public_IP";
        API_Country=$(grep -w "country" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')   && Config_File_Manage INFO Write Country "$API_Country";
        API_Country_Name=$(grep -w "country_name" "$Auins_api_file" | awk '{print $2}' | sed 's#",##' | sed 's#"##')  && Config_File_Manage INFO Write Country_Name "$API_Country_Name";
    fi

    # 校准live环境的时间
    ln -sf "/usr/share/zoneinfo/$(Config_File_Manage INFO Read Timezone)" /etc/localtime &>/dev/null && hwclock --systohc --utc
    case "$ChrootPatterns" in  
        Chroot-OFF) 
            # 根据配置文件, 判断是否开启SSH远程服务, Chroot下不执行
            case $CONF_Service_SSH in [Yy]*) Open_SSH; sleep 5; esac
            # Detect Archiso Version 检查 LiveCD 版本 并提醒更新
            # entries_livecd="/run/archiso/airootfs"  # discern: liveCD
            if [ -d /run/archiso/airootfs ]; then 
                # Home list (LiveCD_Model \ Normal_Model)
                echo "Yes" > "$Local_Dir"/LiveCD 2> /dev/null
            else 
                Normals="yes"; 
            fi
    esac
}

# @下载所需的脚本模块
function Update_Share(){     
    # 根据配置文件选择源, 将其作为脚本的下载源 Module URL: Default settings
    function auins_download_url(){
        case ${1} in
            "gitee"  ) SOURCE="https://gitee.com/auroot/Auins/raw/master" ;;
            "github" ) SOURCE="https://raw.githubusercontent.com/Auroots/Auins/main";;
            "auroot" ) SOURCE="http://auins.auroot.cn" ;;
            "test"   ) SOURCE="http://test.auroot.cn" 
        esac
        SOURCE_SHARE="${SOURCE}/share"
        SOURCE_LOCAL="${SOURCE}/local"
    }
    # 检查与审核文件是否存在或为空, 1.如果不存在则下载, 2.如果为空则删除, 3,如果本地与云端不一致将自动更新
    function audit_file() {
        local directory=$1; file_path=$2; file_name=$(echo "$file_path" | awk -F"/" '{print $NF}')
        case $directory in 
            [Ss]*) SOURCE_URL="${SOURCE}/share";;
            [Ll]*) SOURCE_URL="${SOURCE}/local"
        esac
        if [ -z "$(cat "$Auins_Profile")" ]; then
            Profile_name=$(echo "$Auins_Profile" | awk -F"/" '{print $NF}')
            curl -fsSL "${SOURCE}/local/${Profile_name}" > "$Auins_Profile"
            feed_status "Successfully download: [${white} ${Profile_name} ${green}]" "Download failed: [${white} ${Profile_name} ${red}]";
        fi
        if [ ! -e "$file_path" ]; then
            curl -fsSL "${SOURCE_URL}/${file_name}" > "$file_path"  
            feed_status "Successfully download: [${white} $file_name ${green}]" "Download failed: [${white} $file_name ${red}]";
            case $(echo "$file_name" | awk -F"." '{print $NF}') in 
                sh) chmod +x "$file_path" || if [ -z "$(cat "$file_path")" ]; then rm -f "$file_path"; fi
            esac      
        fi
        case $(Config_File_Manage CONF Read Now_update_auins) in
            [Yy]*)
                    if [[ $file_name != "$(echo "$Auins_Infofile" | awk -F"/" '{print $NF}')" ]] \
                    && [[ $file_name != "$(echo "$Auins_Profile" | awk -F"/" '{print $NF}')" ]]; then
                        if [[ "$(cat "$file_path")" != "$(curl -fsSL "${SOURCE_URL}/${file_name}")" ]]; then 
                            curl -fsSL "${SOURCE_URL}/${file_name}" > "$file_path"
                            feed_status "Successfully update: [${white} $file_name ${green}]" "Update failed: [${white} $file_name ${red}]";
                        fi
                    fi 
                ;;
        esac 
    }
    # 下载想要脚本模块 
    function download_script(){
        audit_file local "$Auins_Profile"
        audit_file local "$Auins_Infofile"

        audit_file share "$Print_Info_Script"  
        audit_file share "$Mirrorlist_Script"
        audit_file share "$Users_Script"
        audit_file share "$Partition_Script"
        audit_file share "$Desktop_Script"
        audit_file share "$Fonts_Script"
        audit_file share "$Process_Script"
        audit_file share "$Blarckarch_Script"
        if [[ "$(cat "$0")" != "$(curl -fsSL "${SOURCE}/${AUINS_SCRIPT_NAME}")" ]]; then 
            curl -fsSL "${SOURCE}/${AUINS_SCRIPT_NAME}" > "$0"
            feed_status "Successfully update: [${white} Auins ${green}]" "Update failed: [${white} Auins ${red}]"; sleep 0.2
        fi
    }
    
    case ${1} in
        "auins_download_url") auins_download_url "$2";;
        "download_script") download_script ;;
    esac
}
# 如何查看网卡名
# awk '{if($1>0 && NR > 2) print substr($1, 0, index($1, ":") - 1)}' /proc/net/dev

# @网络部分集合
function Network(){
    # @获取本机IP地址，并储存到$Auins_Infofile， Network Variable
    function ethernet_info(){    
        local info_all_nic
        info_all_nic=$(awk '{if($1>0 && NR > 2) print substr($1, 0, index($1, ":") - 1)}' /proc/net/dev)

        ETHERNET_NAME=$(for ((i=1;i<=10;i++)); do 
            if echo "$info_all_nic" | grep -E "^en*|^et*" &>/dev/null ; then 
                echo "$info_all_nic" | sed -n "$i",1p | sed 's/^[ ]*//g' | grep -E "^en*|^et*";
            fi
        done)

        WIFI_NAME=$(for  ((i=1;i<=10;i++)); do 
            if echo "$info_all_nic" | grep -E "^wl*" &>/dev/null ; then 
                echo "$info_all_nic" | sed -n "$i",1p | sed 's/^[ ]*//g' | grep -E "^wl*" 
            fi
        done)
        
        LOCAL_WIFI_IP=$(ip route list | grep "${WIFI_NAME}" | cut -d" " -f9 | sed -n '2,1p')
        LOCAL_ETHERNET_IP=$(ip route list | grep "${ETHERNET_NAME}" | cut -d" " -f9 | sed -n '2,1p')
        [[ "$LOCAL_WIFI_IP" == "$LOCAL_ETHERNET_IP" ]] && LOCAL_WIFI_IP="";
        
        Config_File_Manage INFO Write Local_Wifi_Name "${WIFI_NAME:-void}"
        Config_File_Manage INFO Write Local_Ethernet_Name "${ETHERNET_NAME:-void}"

        Config_File_Manage INFO Write Local_Wifi_IP "${LOCAL_WIFI_IP:-void}"
        Config_File_Manage INFO Write Local_Ethernet_IP "${LOCAL_ETHERNET_IP:-void}"   
    }
    # @配置WIFI，Configure WIFI
    function configure_wifi() {
        tips_white "Enter wifi name(SSID) 'TP-Link...'"
        WIFI_SSID=$(Read_user_input)
        tips_white "Wifi Password"
        WIFI_PASSWD=$(Read_user_input)
        iwctl --passphrase "$WIFI_PASSWD" station "$WIFI_NAME" connect "$WIFI_SSID"
        sleep 2; ip address show "${WIFI_NAME}"
        if ! ping -c 3 gitee.com; then
            Process_Management stop "$0" "${red}Network ping check failed. Cannot continue.${suffix}"
        fi
    }
    # @配置有线网络，Configure Ethernet.
    function configure_ethernet(){
        echo ":: One moment please............"
        ip link set "${ETHERNET_NAME}" up
        ip address show "${ETHERNET_NAME}"
        ping -c 3 gitee.com
        sleep 1;
    }
    # @配置网络
    function configure_all(){
        echo -e "\n${white}:: Checking the currently available network."; sleep 2;
        echo -e "${white}:: Ethernet: ${red}${ETHERNET_NAME}${suffix}\n${white}:: Wifi:   ${red}${WIFI_NAME}${suffix}"
        tips_white "Query Network: Ethernet[1] Wifi[2] Exit[3]?"
        case $(Read_user_input) in
            1 ) configure_ethernet ;;
            2 ) configure_wifi ;;
            3 ) bash "${0}"
        esac
    }
    # Ethernet
    case ${1} in
        INFO     ) ethernet_info ;;
        Conf_wifi) configure_wifi ;;
        Conf_Eth ) configure_ethernet ;;
        Conf_all ) configure_all
    esac
}
# @开启SSH服务， Start ssh service 
function Open_SSH(){
    Network INFO; 
    echo "${USER}:${CONF_Password_SSH}" | chpasswd &>/dev/null 
    systemctl start sshd.service
    print_info ssh_info 
}
# @设置root密码 用户 
function ConfigurePassworld(){
    local PasswdFile Number
    export INFO_UserName UsersID CheckingID CheckingUsers
    INFO_UserName=$(Config_File_Manage INFO Read "Users")
    CheckingUsers=""
    if [ -z "$INFO_UserName" ]; then
        PasswdFile="/etc/passwd"
        for Number in {1..30}; do  
            Query=$(tail -n "${Number}" "${PasswdFile}" | head -n 1 | cut -d":" -f3)
            if [ "$Query" -gt 999 ] && [ "$Query" -lt 1050 ]; then
                CheckingID=$(grep "$Query" < ${PasswdFile} | cut -d":" -f3)
                CheckingUsers=$(id -un "$CheckingID" 2> /dev/null)
                # Config_File_Manage INFO Write Users "$CheckingUsers"
                # Config_File_Manage INFO Write UsersID "$CheckingID"
                break;
            fi
        done
        if [ -z "$CheckingUsers" ] ; then
            clear; configure_user
        fi
    fi
}
# @安装系统、内核、基础包等，Install system kernel / base...
function Install_Archlinux(){    
    CONF_Linux_kernel=$(Config_File_Manage CONF Read "Linux_kernel")
    run Update the system clock.; sleep 1s   # update time
    timedatectl set-ntp true
    run Install the Kernel base packages.; sleep 1s 
    case "$CONF_Linux_kernel" in 
        linux    ) pacstrap "$System_Root" base base-devel linux-firmware linux linux-headers linux-api-headers vim unzip  ;;
        linux-lts) pacstrap "$System_Root" base base-devel linux-firmware linux-lts linux-lts-headers vim unzip ;; 
        linux-zen) pacstrap "$System_Root" base base-devel linux-firmware linux-zen linux-zen-headers vim unzip
    esac
    run Configure fstab.; sleep 1s
    genfstab -U $System_Root >> $System_Root/etc/fstab; sleep 1s
    LinuxKernel=$(arch-chroot $System_Root /usr/bin/uname -a | /usr/bin/cut -d"#" -f1  | awk -F " " '{print $3}')
    Config_File_Manage INFO Write LinuxKernel "$LinuxKernel";
    cp -rf "${Local_Dir}" "$System_Root" 
    cp -rf "${Share_Dir}" "$System_Root" 
    cat "$0" > $System_Root/$AUINS_SCRIPT_NAME  && chmod +x $System_Root/$AUINS_SCRIPT_NAME 
    touch $System_Root/local/Chroot && echo "Chroot=ON" > $System_Root/local/Chroot
}
# @Chroot -> $System_Root
function Auin_chroot(){    
    cat "$0" > $System_Root/$AUINS_SCRIPT_NAME  && chmod +x $System_Root/$AUINS_SCRIPT_NAME
    cp -rf "$Share_Dir" $System_Root 2> /dev/null
    cp -rf "$Local_Dir" $System_Root 2> /dev/null
    rm -rf $System_Root/local/LiveCD 2> /dev/null
    echo "No" > $System_Root/local/LiveCD_OFF 2> /dev/null
    arch-chroot $System_Root /bin/bash -c "/$AUINS_SCRIPT_NAME"
}

# @安装 fcitx 输入法
function Configure_fcitx(){
    CONF_PKG_Fcitx=$(Config_File_Manage CONF Read "PKG_Fcitx")
    function install(){
        CONF_Install_Fcitx=$(Config_File_Manage CONF Read "Install_Fcitx")
        function install_fcitx(){
            run "Installing [ Fcitx ]."; sleep 1s
            pacman -Rsc --noconfirm fcitx
            Install_Program "$CONF_PKG_Fcitx" 
            Fcitx_Config="
GTK_IM_MODULE=fcitx
QT_IM_MODULE=fcitx
XMODIFIERS=@im=fcitx"
            echo "$Fcitx_Config" >> /etc/environment
        }

        case $CONF_Install_Fcitx in
            [Yy]* ) install_fcitx;; 
                * ) tips_white "Whether to install fcitx [Y/n]?"
                    case $(Read_user_input) in
                        [Yy]*)  install_fcitx ;;
                            *)  skip Install [ Fcitx ].
                    esac
        esac 
    }
    function remove(){
        # awk '/fcitx/{print NR}' /etc/environment
        sed -i '/fcitx/d' /etc/environment
        pacman -Rsc --noconfirm "$CONF_PKG_Fcitx"
    }
    case $1 in 
        -R) remove; 
            status="flase" ;;
         *) warn "Input error or the option does not exist."; 
            status="true"
    esac
    if [[ ! ${status} == true ]]; then install; fi 
}

# @安装 ibus-rime 输入法
function Configure_ibus_rime() {
    CONF_PKG_Ibus=$(Config_File_Manage CONF Read "PKG_Ibus")
    function install(){
        CONF_Install_Ibus=$(Config_File_Manage CONF Read "Install_Ibus")
        function configure_ibus() {
            if wget -P "$Local_Dir" "${SOURCE_LOCAL}/oh-my-rime.zip" ; then
                mkdir -p /home/"$INFO_UserName"/.config/ibus 
                unzip -d /home/"$INFO_UserName"/.config/ibus "${Local_Dir}/oh-my-rime.zip"
            fi
            Ibus_Config="
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus
ibus-daemon -d -x"
            echo "$Ibus_Config" >> /etc/environment
            echo "$Ibus_Config" >> /etc/profile
        }
        
        case $CONF_Install_Ibus in
            [Yy]*)  run "Installing [ ibus-rime ]." && sleep 1s
                    Install_Program "$CONF_PKG_Ibus" 
                    configure_ibus;;
                *)  tips_white "Whether to install ibus-rime. [Y/n]?"
                    case $(Read_user_input) in
                        [Yy]*)  run "Installing [ ibus-rime ]." && sleep 1s
                                Install_Program "$CONF_PKG_Ibus" 
                                configure_ibus;;
                            *) skip "[ ibus-rime ]."
                    esac
        esac 
    }
    function remove(){
        # awk '/ibus/{print NR}' /etc/environment
        sed -i '/ibus/d' /etc/environment
        sed -i '/ibus/d' /etc/profile
        rm -rf "$HOME"/.config/ibus
        pacman -Rsc --noconfirm "$CONF_PKG_Ibus"
    }
    case $1 in 
        -R) remove && status="flase" ;;
        * ) warn "Input error or the option does not exist." && status="true"
    esac
    if [[ ! ${status} == true ]]; then install; fi 
}

# @Pacman multi threaded download [Axel]
function Axel_Configure() {
    Read_Axel_Thread=$(Config_File_Manage CONF Read "Axel_Thread")
    Axel="XferCommand = \/usr\/bin\/axel -n $Read_Axel_Thread -a -o %o %u"
    case $1 in 
        -R) rm -rf /etc/axelrc
            sed -i "s/$Axel/ /" /etc/pacman.conf
            status="flase";;
        * ) warn "Input error or the option does not exist." && status="true"
    esac
    if [[ ! ${status} == true ]]; then
        Install_Program axel
        echo "alternate_output = 1" > /etc/axelrc
        sed -i "/#XferCommand = \/usr\/bin\/curl/i ${Axel}" /etc/pacman.conf
    fi
}

# @Install I/O Driver 安装驱动
function Install_Io_Driver(){
    # 读取配置 
    CONF_Driver_Audio=$(Config_File_Manage CONF Read "Install_Driver_Audio")
    CONF_Driver_input=$(Config_File_Manage CONF Read "Install_Driver_Input")
    CONF_Driver_Bluez=$(Config_File_Manage CONF Read "Install_Driver_Bluetooth")
    # 读取包名
    CONF_PKG_INTEL=$(Config_File_Manage CONF Read "PGK_Intel")
    CONF_PKG_AMD=$(Config_File_Manage CONF Read "PGK_Amd")
    CONF_PGK_Audio_Driver="$(Config_File_Manage CONF Read "PGK_Audio_Driver")"
    CONF_PGK_Input_Driver="$(Config_File_Manage CONF Read "PGK_Input_Driver")"
    CONF_PGK_Bluez_Driver="$(Config_File_Manage CONF Read "PGK_Bluetooth_Driver")"
    # CPU
    function install_intel(){
        run "Install the Intel driver."; sleep 1s
        Install_Program "$CONF_PKG_INTEL"
    }
    function install_amd(){
        run "Install the Amd driver."; sleep 1s
        Install_Program "$CONF_PKG_AMD"
    }
    case $CPU_Vendor in
    intel)  install_intel ;;
      amd)  install_amd ;;
        *)  tips_white "Please select: Intel[1] AMD[2]"
            case $(Read_user_input) in
                1)  install_intel;;
                2)  install_amd
            esac
    esac
    # 安装音频驱动 
    case $CONF_Driver_Audio in 
        yes) run "Installing Audio driver."; sleep 2s
             Install_Program "$CONF_PGK_Audio_Driver"
             systemctl enable alsa-state.service;;
        *)   skip "Installing Audio driver..."
    esac
    # 安装 I/O 驱动 
    case $CONF_Driver_input in 
        yes) run "Installing input driver."; sleep 2s
             Install_Program "$CONF_PGK_Input_Driver";;
        *)   skip "Installing audio driver..."
    esac 
    # 安装蓝牙驱动
    case $CONF_Driver_Bluez in 
        yes) run "Installing Bluetooth driver."; sleep 2s
             Install_Program "$CONF_PGK_Bluez_Driver"
             echo "load-module module-bluetooth-policy" >> /etc/pulse/system.pa
             echo "load-module module-bluetooth-discover" >> /etc/pulse/system.pa;;
        *)   skip "Installing bluetooth driver..."
    esac 
}

# @Install/Configure Grub, 安装并配置Grub
function Configure_Grub(){
    run "Install grub tools."
    run "Your startup mode has been detected as ${green}$INFO_Boot_way${suffix}."   
    CONF_PKG_GRUB_UEFI="$(Config_File_Manage CONF Read "PGK_GRUB_UEFI")"
    CONF_PKG_GRUB_BOOT="$(Config_File_Manage CONF Read "PGK_GRUB_BOOT")"
    sleep 2;
    case "$INFO_Boot_way" in 
        UEFI)
            Install_Program "$CONF_PKG_GRUB_UEFI"
            grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="$CONF_Hostname" --recheck
            echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
            if efibootmgr | grep "$CONF_Hostname" &>/dev/null ; then
                run "Grub installed successfully -=> [${white} $CONF_Hostname ${green}]"  
                echo -e "${white}     $(efibootmgr | grep "$CONF_Hostname")  ${suffix}\n"  
                sleep 2s
            else
                echo -e "${yellow}     $(efibootmgr)  ${suffix}\n"
                err "Grub installed failed."
            fi
        ;;
        BIOS)
            Install_Program "$CONF_PKG_GRUB_BOOT"
            local INFO_Boot_partition
            INFO_Boot_partition=$(Config_File_Manage INFO Read "Boot_partition") 
            grub-install --target=i386-pc --recheck --force "$INFO_Boot_partition"
            grub-mkconfig -o /boot/grub/grub.cfg
            if echo $? &>/dev/null ; then
                run "Grub installed successfully -=> [${white} $CONF_Hostname ${green}]" 
                sleep 2s
            else
                err "Grub installed failed."
            fi
    esac  
}
# @配置本地化 时区 主机名 语音等  
function Configure_Language(){
    language="LANG=en_US.UTF-8"
        run "Configure enable Network."; sleep 0.2
    systemctl enable NetworkManager
        run "Time zone changed to 'Shanghai'."; sleep 0.2
    ln -sf /usr/share/zoneinfo/"$(Config_File_Manage INFO Read "Timezone")" /etc/localtime &>/dev/null && hwclock --systohc --utc # 将时区更改为"上海" / 生成 /etc/adjtime
        run "Set the hostname \"$CONF_Hostname\"." ; sleep 0.2
    echo "$CONF_Hostname" > /etc/hostname
        run "Localization language settings."; sleep 0.2
    sed -i 's/#.*en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
        run "Write 'en_US.UTF-8 UTF-8' To /etc/locale.gen."; sleep 0.2
    sed -i 's/#.*zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/' /etc/locale.gen
        run "Write 'zh_CN.UTF-8 UTF-8' To /etc/locale.gen."; sleep 0.2
    locale-gen
        run "Configure local language defaults 'en_US.UTF-8'."; sleep 0.2
    echo "$language" > /etc/locale.conf       # 系统语言 "英文" 默认为英文   
}
# @Install/Configure virtualbox-guest-utils / open-vm-tools, 安装虚拟化插件
function install_virtualization_service(){
    CONF_PKG_VMWARE="$(Config_File_Manage CONF Read "PGK_Vmware")"
    CONF_PKG_VIRTUALBOX="$(Config_File_Manage CONF Read "PGK_VirtualBox")"
    case "$1" in
        Vmware)
            run "Install VMware workstation pro tools."
            Install_Program "$CONF_PKG_VMWARE"
            systemctl enable vmtoolsd.service
            systemctl enable vmware-vmblock-fuse.service
            systemctl start vmtoolsd.service
            systemctl start vmware-vmblock-fuse.service
        ;;
        VirtualBox)
            run "Install VirtualBox tools."
            Install_Program "$CONF_PKG_VIRTUALBOX"
            systemctl enable vboxservice.service
            systemctl start vboxservice.service
        ;;
        *) err "This computer is not virtualized."
    esac
}
# @Archlive update tips 
function Archiso_Version_Testing(){
    Version_Route="${1}"
    TIME_ARCHISO=$(sed 's/\./-/g' "$Version_Route")
    Time_interval=$((($(date +%s) - $(date -d "$TIME_ARCHISO 00:00:00" +%s)) / 2605391 ))
    Config_File_Manage INFO Write Archiso_version "${TIME_ARCHISO:- }";
    First_Month_Reminder=""
    case $Time_interval in
        [0])    ;;
        [1])    echo; warn "Please update as soon as possible archiso ! "
                warn "Archiso Version: ${white}[ ${TIME_ARCHISO} ]${suffix}"
                ;;
        [2])    echo; warn "You haven't updated in more than 2 month archiso !" 
                warn "Archiso Version: ${white}[ ${TIME_ARCHISO} ]${suffix}"
                sleep 3
                ;;
        [3])    echo; warn "You haven't updated in more than 3 month archiso !"
                warn "Archiso Version: ${white}[ ${TIME_ARCHISO} ]${suffix}"
                tips_white "Whether to start the script [Y/n]?"
                    case $(Read_user_input) in
                        [Yy]*)  sleep 1 ;;
                            *)  clear; warn "Please update archiso."; exit 30
                    esac ;;
        *)      echo; warn "Archiso Version: ${white}[ ${TIME_ARCHISO} ]${suffix}"
                warn "You haven't updated for a long time, Please update your archisoarchiso!!!"
                exit 30
    esac
}

# @安装系统
function Installation_System(){
    INFO_Root_partition=$(Config_File_Manage INFO Read "Root_partition")  
    if [ -n "$INFO_Root_partition" ]; then  # 后续待修改部分
        Install_Archlinux
    else
        sleep 1; Process_Management restart "$0" "${white}The partition is not mounted.${suffix}"
    fi
    print_info install_system_info 
    sleep 2; echo;    # Chroot到新系统中完成基础配置
    cp -rf /etc/pacman.conf $System_Root/etc/pacman.conf 
    cp -rf /etc/pacman.d/mirrorlist $System_Root/etc/pacman.d/mirrorlist
    echo "No" > $System_Root/local/Config_System
    Auin_chroot
}
# @配置系统
function Configure_System(){
    Disk_Kernel=$(cat /usr/src/linux/version)
    INFO_Install_Kernel=$(Config_File_Manage INFO Read "LinuxKernel")
    CONF_PGK_Terminal_Tools=$(Config_File_Manage CONF Read "PGK_Terminal_Tools")
    CONF_PKG_SystemctlFile=$(Config_File_Manage CONF Read "PKG_SystemctlFile")
    CONF_PGK_Common_Package=$(Config_File_Manage CONF Read "PGK_Common_Package")
    if [ -n "$INFO_Install_Kernel" ] || [ -n "$Disk_Kernel" ] ; then 
        Configure_Grub
        #---------------------------------------------------------------------------#
        run "Install the Terminal tools packages."; sleep 1s
        Install_Program "$CONF_PGK_Terminal_Tools"
        run "Install the System file package."; sleep 1s
        Install_Program "$CONF_PKG_SystemctlFile"
        run "Install the Other common package."; sleep 1s
        Install_Program "$CONF_PGK_Common_Package"
        Configure_Language
        ConfigurePassworld
        INFO_UserName=$(Config_File_Manage INFO Read "Users")
        INFO_UsersID=$(id -u "$INFO_UserName" 2> /dev/null)
        printf "${outG} ${green}A normal user already exists, The UserName:${suffix} ${blue}%s${suffix} ${green}ID: ${blue}%s${suffix}.\n" "${CheckingUsers:-$INFO_UserName}" "${CheckingID:-$INFO_UsersID}"
        rm -rf "$Local_Dir"/Config_System; # 删除这个文件，才能进 Normal_Model  
        if [ "$(Config_File_Manage CONF Read "Archlinucn")" = "yes" ]; then Install_Program archlinuxcn-keyring; fi
        if [ "$(Config_File_Manage CONF Read "Blackarch")" = "yes" ]; then Install_Program blackarch-keyring; fi
        configure_fonts Config_file_install_fonts "$SOURCE_LOCAL"
        print_info config_system_info; sleep 2
    else
        sleep 1; Process_Management restart "$0" "${red}The system is not installed. Exec: 4->2 ${suffix}"
    fi
    rm -rf "$Local_Dir"/Config_System 2> /dev/null
}

# @删除脚本和缓存
function Delete_Script(){
    warn "Deleting scripts and cache!"; sleep 1
    sudo pacman -Scc
    rm -rf "$Share_Dir"
    rm -rf "$Local_Dir"
    warn "  "
    echo -e "\033[1;37m:: $(tput bold; tput setaf 2) ʕ ᵔᴥᵔ ʔ  =>$(tput sgr0) Bye-bye~"
    rm -rf "$0" && sleep 10;
}     

# @ Archiso LiveCD 下自动启用
function LiveCD_Model(){
    print_info logos "$CHROOT_PATTERNS_PRINT" "$START_PATTERNS"
    # 检查archiso版本，如果过低，叫提醒更新
    if [[ $ChrootPatterns == "Chroot-OFF" ]]; then
        CONF_Archiso_Version_check=$(Config_File_Manage CONF Read "Archiso_Version_check");
        case $CONF_Archiso_Version_check in [Yy]*) Archiso_Version_Testing "$Livecd_Version_Route"; esac
    fi
    # 输出首页选项列表
    print_info livecd_home_list;   
    echo -e "\n${Chroot_status:- }"
    # printf "${outG} ${yellow} Please enter${white}[1,2,3..]${yellow} Exit${white}[${red}Q${white}]${suffix} %s" "$inB"
    tips_white "Please enter[1,2,3..] Exit[Q]"
    case $(Read_user_input) in
        1)  bash "$Mirrorlist_Script" "${Auins_Profile}" "${Auins_Infofile}" ; bash "${0}" ;; # 配置源
        2)  Network Conf_all;; # 配置网络
        3)  Open_SSH ;; # 配置SSH
        4) # 二级列表 隐
            print_info livecd_system_module_list;
            echo -e "${input_System_Module_Chroot:- \n}"
            # printf "${outG} ${yellow} Please enter${white}[1,2,3,22..]${yellow} Exit${white}[${red}Q${white}]${suffix} %s" "$inB"
            tips_white "Please enter[1,2,3,22..] Exit[Q]"
            case $(Read_user_input) in
                0)  Auin_chroot ;;
                1)  configure_partition ;; # 磁盘分区 隐
                2)  Installation_System ;; # 安装系统 隐 
                3)  Configure_System ;; # 配置系统 隐
                4)  ConfigurePassworld; configure_desktop ;; # 安装桌面
                11) Install_Io_Driver ;;  # 安装I/O驱动
                22) install_virtualization_service "$Host_Environment"; sleep 3; bash "$0" ;; # 安装Vm tools
            esac ;;
        [Ss]*) bash ;;
        [Qq]* | *) Process_Management stop "$0" 
    esac
}
# @ 安装完Archlinux后 正常可用情况下自动启用
function Normal_Model(){
    print_info logos "$CHROOT_PATTERNS_PRINT" "$START_PATTERNS"
    echo -e "${First_Month_Reminder:- }"
    print_info normal_home_list;   
    echo -e "\n${Chroot_status:- }"
    # printf "${outG} ${yellow} Please enter${white}[1,2,3,22..]${yellow} Exit${white}[${red}Q${white}]${suffix} %s" "$inB"
    tips_white "Please enter[1,2,3,22..] Exit[Q]"
    case $(Read_user_input) in
        1)  bash "$Mirrorlist_Script" "${Auins_Profile}" "${Auins_Infofile}" ; bash "${0}" ;; # 配置源
        2)  Network Conf_all;; # 配置网络
        3)  Open_SSH ;; # 配置SSH
        4)  ConfigurePassworld; configure_desktop ;; # 安装桌面
        5)  Install_Io_Driver;; # 安装I/O驱动
        6)  install_virtualization_service "$Host_Environment"; sleep 3; bash "$0" ;; # 安装Vm tools
        [Dd]) Delete_Script ;;
        [Ss]*) bash ;;
        [Qq]* | *) Process_Management stop "$0" 
    esac
}

# @Auins的其他选项功能
function Auins_Options(){
    case "${1}" in
    # Install Commands: ("-S = install", "-R = uninstall")
        font ) configure_fonts User_options_install_fonts "$SOURCE_LOCAL" "$2"; exit 0 ;;
        fcitx) Configure_fcitx "$2"; exit 0 ;;
        ibus ) Configure_ibus_rime "$2"; exit 0 ;;
        axel ) Axel_Configure "$2";;
        inGpu) warn "Functional improvement in progress..."; exit 0 ;;
        inVmt) install_virtualization_service "$Host_Environment"; exit 0 ;;
    # Settings Options:
        -m | --mirror ) bash "$Mirrorlist_Script" "$Auins_Profile" "$Auins_Infofile"; exit 0 ;;
        -w | --wifi   ) Network Conf_wifi; exit 0 ;;
        -s | --openssh) 
                        case "$CONF_Service_SSH" in
                            yes) skip "activate."; exit 0;;
                            *  )  Open_SSH; exit 0
                        esac ;;
    # Global Options:
        -e | --edit-conf  ) vim "${Auins_Profile}"; exit 0 ;;
        -f | --view-conf  ) less "${Auins_Profile}"; exit 0 ;;
        -i | --view-info  ) clear; less "${Auins_Infofile}"; exit 0 ;;
        -c | --clean-cache) Delete_Script; exit 0 ;;
        -h | --help       ) print_info auins_usage; exit 0 ;;
        -v | --version    ) print_info version; exit 0 
    esac
}

# Start Script | 从这里开始
# >> >> >> >> >> >> >> >> >> >> >> >> 
# @该死的颜色
# 红 绿 黄 蓝 白 后缀
red='\033[1;31m'; green='\033[1;32m'  
yellow='\033[1;33m'; blue='\033[1;36m'  
white='\033[1;37m'; suffix='\033[0m'     
#-----------------------------#
# rw='\033[1;41m'  #--红白
wg='\033[1;42m'; # ws='\033[1;43m'      #白绿 \ 白褐
#wb='\033[1;44m'; wq='\033[1;45m'    #白蓝 \ 白紫
# wa='\033[1;46m';   #白青 \ 
# bx='\033[1;4;36m'; # 下划线 蓝
#-----------------------------
# 提示 绿 黄
outG="${white}::${green} =>${suffix}"; outY="${white}::${yellow} =>${suffix}"

check_priv
Script_Variable_init
Update_Share auins_download_url "$SCRIPTS_SOURCE"  # 锁定脚本下载源
Update_Share download_script        # 下载脚本需要的脚本
Script_init
Network INFO
# 具体的实现
INFO_Host_Env=$(Config_File_Manage INFO Read Host_Environment)
[[ "$INFO_Host_Env" == "Computer" ]] && INFO_Host_Env="" || INFO_Host_Env=" $INFO_Host_Env"

Auins_Options "${1}" "${2}"
case "${ChrootPatterns}" in 
    Chroot-OFF)
        CHROOT_PATTERNS_PRINT="Chroot-OFF";
        
        Chroot_status="${white}::${INFO_Host_Env} ${green}=> ${yellow}Not Chroot.${suffix}"
        input_System_Module_Chroot="${outY} \t${white}[${yellow} 0${white}]${yellow} arch-chroot ${System_Root}       ${red}** ${suffix}\n"
        if [ -e "$System_Root/local/LiveCD_OFF" ]; then # 如果LiveCD_OFF存在于新系统，将自动chroot
            Auin_chroot 2> /dev/null; 
        fi 
        if [ -e "$Local_Dir"/LiveCD ]; then 
            START_PATTERNS="LiveCD"
            LiveCD_Model; 
        fi 
        case $Normals in [Yy]*)  START_PATTERNS="Normal"; Normal_Model; esac
    ;;
    Chroot-ON) 
        CHROOT_PATTERNS_PRINT="Chroot-ON"
        Chroot_status="${outG}  ${wg}Successfully start: Chroot.${suffix}"
        # Tasks_Auin_chroot="0"
        if [ -e "$Local_Dir"/Config_System ]; then 
            START_PATTERNS="LiveCD"
            LiveCD_Model; 
        else 
            START_PATTERNS="Normal"
            Normals="yes"
            Normal_Model
        fi
esac

# >> >> >> >> >> >> >> >> >> >> >> >>
# reflector --country China  --protocol http --protocol https

################################################################################
################# Arch Linux mirrorlist generated by Reflector #################
################################################################################

# With:       reflector --country China --protocol http --protocol https
# When:       2023-04-07 06:52:04 UTC
# From:       https://archlinux.org/mirrors/status/json/
# Retrieved:  2023-04-07 06:52:03 UTC
# Last Check: 2023-04-07 06:41:56 UTC

# Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.hit.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.hit.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch
# Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch
# Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch
# Server = http://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch
# Server = https://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch

# mirror_file="mirror"
# list_number=$(wc -l $mirror_file | awk -F " " '{print $1}')

# Server_list=$(sed -n "$(( "$list_number" - 1 ))"p $mirror_file)

# ping -A -c 1

# @System boot
# function Configure_Systemd_boot(){
#     PGK_SYSTEMD_BOOT="$(Config_File_Manage CONF Read "PGK_SYSTEMD_BOOT")"
#     Install_Program "$PGK_SYSTEMD_BOOT"
#     bootctl install
#     echo "options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/nvme0n1p2) rw" >> /boot/loader/entries/arch.conf
#     bootctl update
#     systemctl enable fstrim.timer
# }

# @可能有用的文件
# /proc/cmdline
# 创建临时目录,脚本退出后自动删除,正常运行时,cd到目录
# make a temporary directory and cd into
# function make_tmp_dir(){
#     tmp="$(mktemp -d /tmp/Auins_strap.XXXXXXXX)"
#     trap 'rm -rf $tmp' EXIT
#     cd "$tmp" || err "Could not enter directory $tmp"
# }
# trap "echo 'Sorry! I have trapped Ctrl-C'" SIGINT


